hydra:
  run:
    dir: outputs/${now:%Y-%m-%d}/${now:%H-%M-%S}
  sweep:
    dir: multirun/${now:%Y-%m-%d}/${now:%H-%M-%S}
    subdir: ${hydra.job.num}
  launcher:
    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params: null
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][HYDRA] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    loggers:
      logging_example:
        level: DEBUG
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: false
  env: {}
  mode: MULTIRUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra:
    - hydra.mode=MULTIRUN
    task:
    - model.params.pooling=MSAP
    - model.params.heads=6
  job:
    name: run_pipeline
    chdir: null
    override_dirname: model.params.heads=6,model.params.pooling=MSAP
    id: ???
    num: ???
    config_name: config
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.3.2
    version_base: '1.3'
    cwd: /home/icegas/Desktop/kaggle/google_sign/google_sign/scripts
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: /home/icegas/Desktop/kaggle/google_sign/google_sign/scripts/config
      schema: file
      provider: main
    - path: ''
      schema: structured
      provider: schema
    output_dir: ???
    choices:
      logger: experiment
      optimizer: adam_schedule
      model: transformer_encoder
      train_loader: loader_ED
      augment: augment_ED
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: default
      hydra/hydra_logging: default
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: basic
      hydra/output: default
  verbose: false
augment:
  X:
    use_augmentation: false
    max_aug: 3
    augmentations:
      mirror_hands:
        p: 0.5
  recon:
    use_augmentation: true
    max_aug: 3
    augmentations:
      mirror_hands:
        p: 0.5
      rotate:
        p: 0.8
        theta_std: 4
      normal_noise:
        p: 0.5
        percent: 0.5
        std: 0.003
      scaling:
        p: 0.5
        percent: 0.5
        std: 0.003
      time_mask:
        p: 0.1
        percent: 0.1
      hand_time_mask:
        p: 0.8
        percent: 0.5
train_loader:
  manifest_path: ../../data/train.csv
  path: ../../data/
  cols:
  - x
  - 'y'
  - z
  num_frames: 64
  batch_size: 1000
  label_map_path: ../../data/sign_to_prediction_index_map.json
  data_path: ../../data/npy_64/
  val_users:
  - '36257'
  ret_user_id: false
model:
  module: transformer_encoder
  name: Transformer
  params:
    num_layers: 2
    d_model: 512
    key_dim: 512
    num_heads: 4
    dff: 512
    length: 64
    target_length: 2
    dropout_rate: 0.2
    last_dense: 512
    last_dropout: 0.1
    pooling: MSAP
    heads: 6
  loss:
    module: losses
    name: CCE
    alpha: 0.0
    params:
      label_smoothing: 0.25
optimizer:
  name: Adam
  schedule:
    name: CosSchedule
    params:
      d_model: 512
      warmup_steps: 0
      num_training_steps: 200
logger:
  tracking_uri: http://127.0.0.1:5000
  experiment_name: google_sign
  run_name: transformer_encoder
epochs: 200
eval: true
test: false
